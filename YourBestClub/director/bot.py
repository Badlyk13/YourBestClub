import json
import os
import re
from datetime import datetime
from pathlib import Path
from time import time, sleep

import requests
from django.db.models import Sum
from django.shortcuts import redirect
from django.utils import timezone
from keyboa import Keyboa, Button
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, Update, WebAppInfo

from telebot import TeleBot
from django.conf import settings
from django.http import JsonResponse

from YourBestClub.settings import BASE_HOST, TELEGRAM_BOT_URI
from director.models import Club, Director, Trainer, Student, ClubGroup, Payment
from director.models import Lesson, Participant
# from finances.models import DirectorPay
from news.models import Post
from . import messages as mes
from .bot_utils import check_tg_id, find_user_data

bot = TeleBot(settings.TELEGRAM_BOT_API_KEY, parse_mode='HTML')
ENTER_CLUB_ID = {}

valid_FIO_pattern = re.compile(r"^[–∞-—è–ê-–Ø—ë–Åa-zA-Z]+ [–∞-—è–ê-–Ø—ë–Åa-zA-Z]+ ?[–∞-—è–ê-–Ø—ë–Åa-zA-Z]+$")
valid_Phone_pattern = re.compile(r"^((\+7|7|8)+([0-9]){10})$")
valid_BD_pattern = re.compile(r"^(0?[1-9]|[12][0-9]|3[01]).(0?[1-9]|1[012]).((19|20)\d\d)+$")


def validate(name: str):
    return bool(valid_FIO_pattern.match(name))


def validate_phone(phone: str):
    return bool(valid_Phone_pattern.match(phone))


def validate_birthday(bd: str):
    return bool(valid_BD_pattern.match(bd))


# _____________________________________________________________________________________________


def main_menu(chat_id, user_type):
    menu = []
    text = ''
    if user_type == 'director':
        menu = [["üè´ –ú–æ–∏ –∫–ª—É–±—ã", {"üí∏ –§–∏–Ω–∞–Ω—Å—ã": 'director_finance'}],
                [{"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏": 'director_settings'}, {"üíå –ù–æ–≤–æ—Å—Ç–∏": 'director_news'}]]
        text = '<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞</b>'
    if user_type == 'trainer':
        menu = [["üè´ –ú–æ–∏ –≥—Ä—É–ø–ø—ã", {"üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ": 'trainer_schedule'}],
                [{"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏": 'trainer_settings'}, {"üíå –ù–æ–≤–æ—Å—Ç–∏": 'trainer_news'}]]
        text = '<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</b>'
    if user_type == 'student':
        menu = [[{"üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ": 'student_schedule'}, {"üí∏ –§–∏–Ω–∞–Ω—Å—ã": 'student_finance'}],
                [{"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏": 'student_settings'}, {"üíå –ù–æ–≤–æ—Å—Ç–∏": 'student_news'}]]
        text = '<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —É—á–µ–Ω–∏–∫–∞</b>'

    keyboard = Keyboa(items=menu)
    msg = bot.send_message(chat_id, text, reply_markup=keyboard())


def send_private_message(chat_id, message):
    msg = bot.send_message(chat_id, message)
    with open(f'{chat_id}.txt', 'a', encoding='utf8') as f:
        f.write(f'{msg.message_id}\n')
    return True


def clear_chat(chat_id, msg_id):
    bot.delete_message(chat_id, msg_id)
    with open(f'{chat_id}.txt', 'r', encoding='utf8') as f:
        while True:
            line = f.readline()
            if not line:
                break
            bot.delete_message(chat_id, int(line.strip()))
    path = f'{chat_id}.txt'
    try:
        os.remove(path)
    except:
        print('Path is not a file')
    return True


def broadcast(recipients, mes_data):
    text = f"<b>{mes_data['subject']}</b>\n\n{mes_data['text']}"
    if mes_data['image'] is None:
        for recipient in recipients:
            bot.send_message(recipient, text)
    else:
        print(mes_data['image'])
        with open(mes_data['image'], 'rb') as image:
            photo = image.read()
            for recipient in recipients:
                bot.send_photo(recipient, photo, caption=text)


def lesson_remainder(recipients, lesson_data):
    menu = []
    text = f'–ü—Ä–∏–≤–µ—Ç! ‚ú® –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: —Å–µ–≥–æ–¥–Ω—è –≤ {lesson_data["time"]} –≤ –≥—Ä—É–ø–ø–µ {lesson_data["group"]} –Ω–∞—á–Ω—ë—Ç—Å—è –∑–∞–Ω—è—Ç–∏–µ!'
    menu.append([{'üö∑ –ü—Ä–æ–ø—É—Å—Ç–∏–º': f'participant_status_false&{lesson_data["pk_participant"]}'}])
    keyboard = Keyboa(items=menu)
    for recipient in recipients:
        msg = bot.send_message(recipient, text, reply_markup=keyboard())
    return True


def lesson_individuals_remainder(recipients, lesson_data):
    menu = []
    text = f'–ü—Ä–∏–≤–µ—Ç! ‚ú® –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: —Å–µ–≥–æ–¥–Ω—è –≤ {lesson_data["time"]} —Å–æ—Å—Ç–æ–∏—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ!'
    menu.append([{'üö∑ –ü—Ä–æ–ø—É—Å—Ç–∏–º': f'participant_status_false&{lesson_data["pk_participant"]}'}])
    keyboard = Keyboa(items=menu)
    for recipient in recipients:
        msg = bot.send_message(recipient, text, reply_markup=keyboard())
    return True


def trainer_remainder(recipient, lesson_data):
    menu = []
    students = "\n".join(lesson_data["participants"])
    if lesson_data.get("group"):
        text = f'–ü—Ä–∏–≤–µ—Ç! ‚ú® –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: —Å–µ–≥–æ–¥–Ω—è –≤ {lesson_data["time"]} —Å–æ—Å—Ç–æ–∏—Ç—Å—è –∑–∞–Ω—è—Ç–∏–µ —É –≥—Ä—É–ø–ø—ã {lesson_data["group"]}! ' \
               f'–°–æ—Å—Ç–∞–≤:\n\n{students}'
    else:
        text = f'üîî <i>C–µ–≥–æ–¥–Ω—è –≤ {lesson_data["time"]} —Å–æ—Å—Ç–æ–∏—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è: \n\n{students}</i>'
    print(text, recipient)
    msg = bot.send_message(recipient, text)
    return True


# _____________________________________________________________________________________________


# @csrf_exempt
def get_update(request):
    if request.method == 'POST':
        with open('tg_log.txt', 'a', encoding='utf8') as f:
            f.write(f'TUT znaxchit POST\n{os.listdir(path=".")}')
        if request.headers.get('Content-Type') == 'application/json':
            with open('tg_log.txt', 'a', encoding='utf8') as f:
                f.write(f'TUT znachit application/json\n')
            upd = json.loads(request.read().decode('utf-8'))
            update = Update.de_json(upd)
            with open('tg_log.txt', 'a', encoding='utf8') as f:
                f.write(f'{update}\n')
            bot.process_new_updates([update])

        return JsonResponse({'ok': True, 'status': 200})
    else:
        return redirect('/login/')


# _______________________________________–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –¢–†–ï–ù–ï–† _____________________________________


def trainer_registration(club, trainer):
    text = f"üîî <i> –í {club} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è {trainer} –≤ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä–∞! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É –∏ –æ–∫–ª–∞–¥.</i>"
    markup = InlineKeyboardMarkup()
    button = InlineKeyboardButton(text='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
                                  web_app=WebAppInfo(url=f'{BASE_HOST}/trainer/{trainer.pk}/edit/'))
    markup.add(button)
    bot.send_message(club.director.tgID, text, reply_markup=markup)


# _____________________________________________________________________________________________


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    if check_tg_id(message.chat.id):
        menu = []
        send_login = False
        user_type_str, club_title, group_str = '', '', ''
        try:
            command_type = message.text.split(' ')[-1][0]
            user_pk = message.text.split(' ')[-1][1:-1]
            user_type = message.text.split(' ')[-1][-1]

            # ================================= –ü–†–ò–ö–†–ï–ü–õ–ï–ù–ò–ï TG_ID ====================================
            if command_type == 'c' and user_type == 'd':
                bot.delete_message(message.chat.id, message.message_id)
                director = Director.objects.get(pk=int(user_pk))
                user_type_str = '–¥–∏—Ä–µ–∫—Ç–æ—Ä–∞'
                if not director.tgID:
                    director.tgID = message.chat.id
                    director.save()

                msg = bot.send_message(message.chat.id, mes.DIR_REG_OK.replace('#{type_u}', user_type_str))
                markup = InlineKeyboardMarkup()
                button = InlineKeyboardButton(text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
                                              web_app=WebAppInfo(url=f'{BASE_HOST}/login_tg/{msg.message_id}/'))
                markup.add(button)
                msg = bot.send_message(message.chat.id, '‚ö†Ô∏è –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º üëáüèª',
                                       reply_markup=markup)
                print(msg.message_id)
                with open(f'{message.chat.id}.txt', 'a', encoding='utf8') as f:
                    f.write(f'{msg.message_id}\n')

                return True

            if command_type == 'c' and user_type == 't':
                user_type_str = '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è'
                trainer = Trainer.objects.get(pk=int(user_pk))
                club_title = trainer.club.title
                if not trainer.tgID:
                    trainer.tgID = message.chat.id
                    trainer.save()

                text = mes.CREATE_USER.replace('#{type_u}', user_type_str).replace('#{club}', f' –≤ {club_title}')
                markup = InlineKeyboardMarkup()
                button = InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å', web_app=WebAppInfo(
                    url=settings.BASE_HOST + '/rtruftg/' + str(message.chat.id)))
                markup.add(button)
                msg = bot.send_message(message.chat.id, text, reply_markup=markup)
                with open(f'{message.chat.id}.txt', 'a', encoding='utf8') as f:
                    f.write(f'{msg.message_id}\n')
                return True

            if command_type == 'c' and user_type == 's':
                user_type_str = '—É—á–µ–Ω–∏–∫–∞'
                student = Student.objects.get(pk=int(user_pk))
                club_title = student.group.club.title
                if not student.tgID:
                    student.tgID = message.chat.id
                    student.save()
                text = mes.CREATE_USER.replace('#{type_u}', user_type_str).replace('#{club}', f' –≤ {club_title}')
                markup = InlineKeyboardMarkup()
                button = InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å', web_app=WebAppInfo(
                    url=settings.BASE_HOST + '/rtruftg/' + str(message.chat.id)))
                markup.add(button)
                msg = bot.send_message(message.chat.id, text, reply_markup=markup)
                with open(f'{message.chat.id}.txt', 'a', encoding='utf8') as f:
                    f.write(f'{msg.message_id}\n')
                return True
            # ==========================================================================================

            # ================================= –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ====================================
            if command_type == 'r':
                url, text = '', ''
                club = Club.objects.get(pk=int(user_pk))
                if user_type == 't':
                    text = mes.INVITE.replace('#{type_u}', '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è').replace('#{club}', f'{club.title}')
                    url = settings.BASE_HOST + f'/club/{int(club.pk)}/add-trainer/{message.chat.id}/'
                if user_type == 's':
                    text = mes.INVITE.replace('#{type_u}', '—É—á–µ–Ω–∏–∫–∞').replace('#{club}', f'{club.title}')
                    url = settings.BASE_HOST + f'/club/{int(club.pk)}/group/0/add-student/{message.chat.id}/'

                markup = InlineKeyboardMarkup()
                button = InlineKeyboardButton(text='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', web_app=WebAppInfo(url=url))
                markup.add(button)
                msg = bot.send_message(message.chat.id, text, reply_markup=markup)
                return True

        except:
            return bot.send_message(message.chat.id, f'–†–∞–±–æ—Ç–∞ —Å –±–æ—Ç–æ–º –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ '
                                                     f'{BASE_HOST}\n\n–ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ ‚Äî '
                                                     f'–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu')
    else:
        user_type, user_data = find_user_data(message.chat.id)
        if user_data and user_type:
            main_menu(message.chat.id, user_type)
        else:
            return bot.send_message(message.chat.id,
                                    f'–í–∞—à –¢–µ–ª–µ–≥—Ä–∞–º —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É. –ó–∞–∫–æ–Ω—á–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ {BASE_HOST}')


# **************************** –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ ********************************************
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call, **kwargs):
    print('call.data: ', call.data)
    menu = []

    # ================================= –û–°–ù–û–í–ù–û–ï –ú–ï–ù–Æ –õ–ö ====================================
    if call.data.startswith("mainmenu_"):
        user_type = call.data.split('_')[1]
        bot.delete_message(call.message.chat.id, call.message.message_id)
        main_menu(call.message.chat.id, user_type)
        return True

    # ================================= –û–¢–ú–ï–ù–ê –ü–û–°–ï–©–ï–ù–ò–ò–Ø ====================================
    if call.data.startswith("participant_status_false"):
        pk_participant = call.data.split('&')[1]
        participant = Participant.objects.get(pk=int(pk_participant))
        participant.status = False
        participant.save()
        msg = bot.send_message(call.message.chat.id,
                               f'‚úîÔ∏è –£—á–∞—Å—Ç–∏–µ –≤ –∑–∞–Ω—è—Ç–∏–∏ {timezone.datetime.strftime(participant.lesson.dt, "%d.%m.%Y %H:%M")} <b>–æ—Ç–º–µ–Ω–µ–Ω–æ</b>!')
        return True

    # ================================= –ö–ù–û–ü–ö–ò –û–°–ù–û–í–ù–û–ì–û –ú–ï–ù–Æ –î–ò–†–ï–ö–¢–û–†–ê ====================================
    if call.data == "üè´ –ú–æ–∏ –∫–ª—É–±—ã":
        clubs = Director.objects.get(tgID=call.message.chat.id).club_set.all()
        if clubs:
            for club in clubs:
                menu.append({f'{club.title}, {club.city}': f'club_{club.pk}'})
            keyboard1 = Keyboa(items=menu, items_in_row=2).keyboard
            button_footer = [
                {'text': '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—É–±', 'web_app': WebAppInfo(url=settings.BASE_HOST + '/club/add-club/')},
                {'‚óÄÔ∏è –ù–∞–∑–∞–¥': 'mainmenu_director'}]
            keyboard2 = Keyboa(items=button_footer).keyboard
            keyboard = Keyboa.combine(keyboards=(keyboard1, keyboard2))
            msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                        text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–± üëáüèª', reply_markup=keyboard)
        else:
            markup = InlineKeyboardMarkup()
            button = InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—É–±',
                                          web_app=WebAppInfo(url=settings.BASE_HOST + '/club/add-club/'))
            button_back = InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'mainmenu_director')
            markup.add(button).add(button_back)
            msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                        text='üè´ –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –±—É–¥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤—Å–µ –≤–∞—à–∏ –∫–ª—É–±—ã.\n\n'
                                             '–î–æ–±–∞–≤–ª—è–π—Ç–µ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–æ–º!',
                                        reply_markup=markup)
        return True

    # =================================  –î–ò–†–ï–ö–¢–û–† –§–ò–ù–ê–ù–°–´ ====================================
    if call.data == 'director_finance':
        user = Director.objects.get(tgID=call.message.chat.id)
        balance = Payment.objects.filter(user__director=user, is_personal=False).aggregate(Sum('amount'))['amount__sum']
        balance = balance if balance is not None else 0
        menu = [
            [{'text': "üíµ –í—ã–≤–µ—Å—Ç–∏", 'web_app': WebAppInfo(url=f'{BASE_HOST}/withdrawal/')},
             {'text': 'üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å', 'web_app': WebAppInfo(url=f'{BASE_HOST}/refill/')}],
            [{'text': '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã', 'web_app': WebAppInfo(url=f'{BASE_HOST}/club/0/finances/add_personal_payment/')},
             {'‚óÄÔ∏è –ù–∞–∑–∞–¥': 'mainmenu_director'}]
        ]
        keyboard = Keyboa(items=menu)
        incoming = \
            Payment.objects.filter(user__director=user, amount__gt=0, is_personal=False).aggregate(Sum('amount'))[
                'amount__sum']
        expenses = \
            Payment.objects.filter(user__director=user, amount__lt=0, is_personal=False).aggregate(Sum('amount'))[
                'amount__sum']
        personal = Payment.objects.filter(user__director=user, amount__lt=0, is_personal=True).aggregate(Sum('amount'))[
            'amount__sum']
        incoming = incoming if incoming is not None else 0
        expenses = expenses if expenses is not None else 0
        personal = personal if personal is not None else 0
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                              text=f'<b>üí∏ –§–∏–Ω–∞–Ω—Å—ã</b>\n\n'
                                   f'üíé –ë–∞–ª–∞–Ω—Å: <b>{balance}‚ÇΩ</b>\n\n'
                                   f'–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n<i>–î–æ—Ö–æ–¥—ã:</i> <b>{incoming}‚ÇΩ</b>, <i>–†–∞—Å—Ö–æ–¥—ã:</i> <b>{expenses}‚ÇΩ</b>, '
                                   f'<i>–õ–∏—á–Ω—ã–µ:</i> <b>{personal}‚ÇΩ</b>\n'
                                   f'--------------------\n'
                                   f'<b>–ò—Ç–æ–≥–æ: {incoming + expenses + personal}‚ÇΩ</b>\n',
                              reply_markup=keyboard()
                              )
        return True
    # =================================  –î–ò–†–ï–ö–¢–û–† –ù–ê–°–¢–†–û–ô–ö–ò ====================================
    if call.data == "director_settings":
        menu.append([{'‚óÄÔ∏è –ù–∞–∑–∞–¥': 'mainmenu_director'}])
        keyboard = Keyboa(items=menu)
        msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                    text='ü§∑üèº‚Äç‚ôÇÔ∏è –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –Ω–æ –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç –ø–æ—Ç–æ–º—É —á—Ç–æ —è –µ—â–µ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª –∫–∞–∫–∏–µ...',
                                    reply_markup=keyboard())

    # =================================  –î–ò–†–ï–ö–¢–û–† –ù–û–í–û–°–¢–ò ====================================
    if call.data == "director_news":
        menu.append([{'‚óÄÔ∏è –ù–∞–∑–∞–¥': 'mainmenu_director'}])
        keyboard = Keyboa(items=menu)
        posts = Post.objects.all()
        text = ''
        if posts:
            for news in posts:
                text += f'<b>{news.title}</b>\n\n{news.content[:100]}...\n\n<a href={news.get_absolute_url()}>–ü–æ–¥—Ä–æ–±–Ω–µ–µ...</a>'
        else:
            text += 'ü§∑üèº‚Äç‚ôÇÔ∏è –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–æ–≤–æ—Å—Ç–∏... –ù–æ –∏—Ö –ø–æ–∫–∞ –Ω–µ—Ç!'
        msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                    text=text, reply_markup=keyboard())

    # **************************** –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ club_ ********************************************
    if call.data.startswith('club_'):
        menu = []
        if '&' not in call.data:
            club_data = call.data.split('_')
            club = Club.objects.filter(pk=int(club_data[1])).first()
            menu = [
                [{"üë®üèº‚Äçüè´ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏": f'club_{club.pk}&trainers'}, {"üóÇ –ì—Ä—É–ø–ø—ã": f'club_{club.pk}&groups'}],
                [{"üë´ –£—á–µ–Ω–∏–∫–∏": f'club_{club.pk}&students'}, {"üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ": f'club_{club.pk}&schedule'}],
                [{"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": f'club_{club.pk}&statistic'}, {"üí∏ –§–∏–Ω–∞–Ω—Å—ã": f'club_{club.pk}&finances'}],
                [{'text': "‚úâÔ∏è –°–≤—è–∑—å", 'web_app': WebAppInfo(url=f'{BASE_HOST}/club/{club.pk}/mailing/')},
                 {"ü™Ñ –í–∫–ª–∞–¥ –≤ –±—É–¥—É—â–µ–µ": f'club_{club.pk}&donation'}],
                [{'text': 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'web_app': WebAppInfo(url=f'{BASE_HOST}/club/{club.pk}/edit/')},
                 {'üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è': f'club_{club.pk}&events'}],
                [{'‚óÄÔ∏è –ù–∞–∑–∞–¥': 'mainmenu_director'}, ]
            ]
            keyboard = Keyboa(items=menu)
            msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                        text=f'üè´ <b>{club.title}</b>, {club.city}.\n<i>{club.description}</i>',
                                        reply_markup=keyboard())

        else:
            club_data = call.data.split('_')
            pk_club = int(club_data[1].split('&')[0])
            club = Club.objects.filter(pk=pk_club).first()
            choice = club_data[1].split('&')[1]

            if choice == 'trainers':
                warning = ''
                trainers = Trainer.objects.filter(club=club)
                url = settings.BASE_HOST + f'/club/{int(club.pk)}/trainer-add/'
                link = requests.get(f'https://clck.ru/--?url={TELEGRAM_BOT_URI}r{club.pk}t').text
                if trainers:
                    for trainer in trainers:
                        if trainer.user is None:
                            warning = '‚ö†Ô∏è '
                        menu.append({
                            f'{warning}{trainer.surname} {trainer.name[0]}.{trainer.soname[0]}.': f'trainer_{trainer.pk}'})
                    keyboard1 = Keyboa(items=menu, items_in_row=2).keyboard
                    button_footer = [
                        {'text': '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞', 'web_app': WebAppInfo(url=url)},
                        {'‚óÄÔ∏è –ù–∞–∑–∞–¥': f'club_{club.pk}'}]
                    keyboard2 = Keyboa(items=button_footer).keyboard
                    keyboard = Keyboa.combine(keyboards=(keyboard1, keyboard2))

                    msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                                text=f'üë®üèº‚Äçüè´ {club.title}, —Ç—Ä–µ–Ω–µ—Ä–∞:\n\n'
                                                     f'ü§ó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å üëâüèª <code>{link}</code>',
                                                reply_markup=keyboard)
                else:
                    markup = InlineKeyboardMarkup()
                    button = InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞', web_app=WebAppInfo(url=url))
                    button_back = InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'club_{club.pk}')
                    markup.add(button).add(button_back)
                    msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                                text=f'ü§∑üèº‚Äç‚ôÇÔ∏è –í —ç—Ç–æ–º –∫–ª—É–±–µ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ç—Ä–µ–Ω–µ—Ä–∞...\n\n'
                                                     f'–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞ —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ, '
                                                     f'–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É üëáüèª '
                                                     f'–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ —Ç—Ä–µ–Ω–µ—Ä—É, '
                                                     f'—á—Ç–æ–±—ã –æ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ <b>{club.title}</b> —Å–∞–º.\n\n'
                                                     f'üëâüèª <code>{TELEGRAM_BOT_URI}r{club.pk}t</code>',
                                                reply_markup=markup)

            if choice == 'groups':
                groups = ClubGroup.objects.filter(club=club)
                url = settings.BASE_HOST + f'/club/{int(club.pk)}/group-add/'
                if groups:
                    for group in groups:
                        menu.append({f'{group.title}': f'group_{group.pk}'})
                    keyboard1 = Keyboa(items=menu, items_in_row=2).keyboard
                    button_footer = [
                        {'text': '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É', 'web_app': WebAppInfo(url=url)},
                        {'‚óÄÔ∏è –ù–∞–∑–∞–¥': f'club_{club.pk}'}]
                    keyboard2 = Keyboa(items=button_footer).keyboard
                    keyboard = Keyboa.combine(keyboards=(keyboard1, keyboard2))
                    msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                                text=f'üóÇ {club.title}, –≥—Ä—É–ø–ø—ã:',
                                                reply_markup=keyboard)
                else:
                    markup = InlineKeyboardMarkup()
                    button = InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É', web_app=WebAppInfo(url=url))
                    button_back = InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'club_{club.pk}')
                    markup.add(button).add(button_back)
                    msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                                text='ü§∑üèº‚Äç‚ôÇÔ∏è –í —ç—Ç–æ–º –∫–ª—É–±–µ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≥—Ä—É–ø–ø—ã...',
                                                reply_markup=markup)

            if choice == 'students':
                students = Student.objects.filter(group__in=ClubGroup.objects.filter(club=club), is_deleted=False)
                warning = ''
                if students:
                    for student in students:
                        if student.user is None:
                            warning = '‚ö†Ô∏è '
                        if student.is_active:
                            menu.append(
                                {
                                    f'{warning}{student.surname} {student.name[0]}.{student.soname[0]}.': f'student_{student.pk}'})
                        else:
                            menu.append(
                                {
                                    f'‚õîÔ∏è {student.surname} {student.name[0]}.{student.soname[0]}.': f'student_{student.pk}'})
                    menu.append({'‚óÄÔ∏è –ù–∞–∑–∞–¥': f'club_{club.pk}'})
                    keyboard = Keyboa(items=menu, items_in_row=3)
                    msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                                text=f'üë´ {club.title}, —É—á–µ–Ω–∏–∫–∏:',
                                                reply_markup=keyboard())
                else:
                    menu.append({'‚óÄÔ∏è –ù–∞–∑–∞–¥': f'club_{club.pk}'})
                    keyboard = Keyboa(items=menu, items_in_row=2)
                    msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                                text='ü§∑üèº‚Äç‚ôÇÔ∏è –í —ç—Ç–æ–º –∫–ª—É–±–µ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—á–µ–Ω–∏–∫–∏...\n\n'
                                                     '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–≤ - –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <b>–Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –≥—Ä—É–ø–ø—É</b>.',
                                                reply_markup=keyboard())

            if choice == 'schedule':
                text = ''
                groups = ClubGroup.objects.filter(club=club)
                lessons_individuals = Lesson.objects.filter(is_group=False)
                filtered_lessons_individuals = []
                for lesson in lessons_individuals:
                    for participant in lesson.participant_set.all():
                        if participant.student.group in groups:
                            if lesson not in filtered_lessons_individuals:
                                filtered_lessons_individuals.append(lesson)
                if groups:
                    for group in groups:
                        lessons_group = Lesson.objects.filter(group=group)
                        if lessons_group:
                            text += f'<b>{group.title}</b>, –≥—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è:\n'
                            for lesson in lessons_group:
                                trainers = lesson.trainer.all()
                                trainers_str = ''
                                for trainer in trainers:
                                    trainers_str += f'{trainer}, '
                                text += f'{timezone.datetime.strftime(lesson.dt, "%d.%m.%Y %H:%M")} - {trainers_str[:-2]}\n'
                            text += f'\n'
                        else:
                            text += f'<b>{group.title}</b>, –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç!\n'
                else:
                    text = f'<b>‚ö†Ô∏è –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã!</b>\n'
                text += '\n'
                if filtered_lessons_individuals:
                    for lesson in filtered_lessons_individuals:
                        students = ''
                        print('lesson', lesson)
                        for participant in lesson.participant_set.all():
                            if participant.student.soname not in students:
                                students += f'{participant.student.surname} {participant.student.name[0]}. {participant.student.soname[0]}., '
                        trainers = ''
                        for trainer in lesson.trainer.all():
                            trainers += f'{trainer.surname} {trainer.name[0]}. {trainer.soname[0]}., '
                        text += f'{timezone.datetime.strftime(lesson.dt, "%d.%m.%Y %H:%M")} - {students[:-2]} ({trainers[:-2]})\n'
                else:
                    text += f'<b> –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç! </b>\n'

                menu.append({'‚óÄÔ∏è –ù–∞–∑–∞–¥': f'club_{club.pk}'})
                text += f'\nüí° <i>–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚Äî –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –≥—Ä—É–ø–ø—É.</i>'
                keyboard = Keyboa(items=menu, items_in_row=2)
                msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                            text=f'üìÜ <b>{club.title}</b>, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n{text}',
                                            reply_markup=keyboard())

            if choice == 'statistic':
                text = f'–ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –∫–∞–∫–∞—è-—Ç–æ –∫—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞. –≠—Ç–æ –∫–∞–∫ —Ä–∞–∑ –Ω–∞ –ø–æ–¥—É–º–∞—Ç—å, {call.message.chat.first_name}...'
                menu.append({'‚óÄÔ∏è –ù–∞–∑–∞–¥': f'club_{club.pk}'})
                keyboard = Keyboa(items=menu, items_in_row=2)
                msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                            text=f'üìä {club.title}, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n{text}',
                                            reply_markup=keyboard())

            if choice == 'finances':
                menu = [
                    [{'text': '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã',
                      'web_app': WebAppInfo(url=f'{BASE_HOST}/club/{club.pk}/finances/add_personal_payment/')},
                     {'‚óÄÔ∏è –ù–∞–∑–∞–¥': f'club_{club.pk}'}]
                ]
                keyboard = Keyboa(items=menu)
                incoming = Payment.objects.filter(club=club, amount__gt=0, is_personal=False).aggregate(Sum('amount'))['amount__sum']
                expenses = Payment.objects.filter(club=club, amount__lt=0, is_personal=False).aggregate(Sum('amount'))['amount__sum']
                personal = Payment.objects.filter(club=club, amount__lt=0, is_personal=True).aggregate(Sum('amount'))['amount__sum']
                incoming = incoming if incoming is not None else 0
                expenses = expenses if expenses is not None else 0
                personal = personal if personal is not None else 0
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                      text=f'<b>üí∏ <b>{club.title}</b>, –§–∏–Ω–∞–Ω—Å—ã</b>\n\n'
                                           f'<i>–î–æ—Ö–æ–¥—ã:</i> <b>{incoming}‚ÇΩ</b>, <i>–†–∞—Å—Ö–æ–¥—ã:</i> <b>{expenses}‚ÇΩ</b>, '
                                           f'<i>–õ–∏—á–Ω—ã–µ:</i> <b>{personal}‚ÇΩ</b>\n'
                                           f'--------------------\n'
                                           f'<b>–ò—Ç–æ–≥–æ: {incoming + expenses + personal}‚ÇΩ</b>\n',
                                      reply_markup=keyboard()
                                      )

            if choice == 'mailing':
                menu = [{'üë®‚Äçüë¶‚Äçüë¶ –í—Å–µ–º': f'mailing_club_{club.pk}'}, {'üë®üèº‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä–∞–º': f'mailing_trainers_{club.pk}'},
                        {'üóÇ –ì—Ä—É–ø–ø–µ': f'mailing_group_{club.pk}'}, {'üë´ –£—á–µ–Ω–∏–∫–∞–º': f'mailing_students_{club.pk}'},
                        {'‚óÄÔ∏è –ù–∞–∑–∞–¥': f'club_{club.pk}'}]
                keyboard = Keyboa(items=menu, items_in_row=2)
                msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                            text=f'üí∏ {club.title}, —Ä–∞—Å—Å—ã–ª–∫–∞:',
                                            reply_markup=keyboard())

            if choice == 'donation':
                text = f'–ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –∫–∞–∫–∏–µ —Ç–æ –ú–û–©–ù–´–ï –ü–†–ò–ó–´–í–´ –¥–ª—è –¥–æ–Ω–∞—Ç–∞. –≠—Ç–æ –∫–∞–∫ —Ä–∞–∑ —Ç–æ–∂–µ –Ω–∞ –æ—á–µ–Ω—å –ø–æ–¥—É–º–∞—Ç—å, {call.message.chat.first_name}...'
                menu.append({'‚óÄÔ∏è –ù–∞–∑–∞–¥': f'club_{club.pk}'})
                keyboard = Keyboa(items=menu, items_in_row=2)
                msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                            text=f'üí∏ {club.title}, –≤–∫–ª–∞–¥ –≤ –±—É–¥—É—â–µ–µ:\n\n{text}',
                                            reply_markup=keyboard())

            if choice == 'events':
                text = f'–ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –∫–∞–∫–∏–µ —Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ù–∞–¥–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å, {call.message.chat.first_name}...'
                menu.append({'‚óÄÔ∏è –ù–∞–∑–∞–¥': f'club_{club.pk}'})
                keyboard = Keyboa(items=menu, items_in_row=2)
                msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                            text=f'üí∏ {club.title}, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n{text}',
                                            reply_markup=keyboard())

    # **************************** –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ trainer_ ********************************************
    if call.data.startswith('trainer_'):
        menu = []
        if '&' in call.data:
            pass
        else:
            mes_data = call.data.split('_')
            trainer = Trainer.objects.filter(pk=int(mes_data[1])).first()
            lessons = Lesson.objects.filter(is_group=True, trainer=trainer)
            groups_text = "–ù–µ—Ç –≥—Ä—É–ø–ø  "
            groups = []
            if lessons:
                groups_text = ''
                for lesson in lessons:
                    if lesson.group not in groups:
                        groups.append(lesson.group)
                        groups_text += f'{lesson.group.title}, '
            club = trainer.club
            statistic = '–ó–¥–µ—Å—å –∫–∞–∫–∞—è —Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 1.\n–ó–¥–µ—Å—å –∫–∞–∫–∞—è —Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 2.\n–ó–¥–µ—Å—å –∫–∞–∫–∞—è —Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 3.'

            if trainer.user is not None:
                button_footer = [
                    {'text': 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'web_app': WebAppInfo(url=f'{BASE_HOST}/trainer/{trainer.pk}/edit/')},
                    {'‚óÄÔ∏è –ù–∞–∑–∞–¥': f'club_{club.pk}&trainers'}]
                keyboard2 = Keyboa(items=button_footer).keyboard
                keyboard = Keyboa.combine(keyboards=(keyboard2,))
                text = f'<b>üë®üèº‚Äçüè´ {trainer}</b>\n\nüìû <a href="tel:{trainer.phone}">{trainer.phone}</a>\n' \
                       f'üóÇ {groups_text[:-2]}\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n{statistic}'
                msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                            text=text, reply_markup=keyboard)
                return True
            else:
                button_footer = [{'‚óÄÔ∏è –ù–∞–∑–∞–¥': f'club_{club.pk}&trainers'}]
                keyboard2 = Keyboa(items=button_footer).keyboard
                keyboard = Keyboa.combine(keyboards=(keyboard2,))
                text = f'‚ö†Ô∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Å—Å—ã–ª–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è:\n\n' \
                       f'üëâüèª <code>{requests.get(f"https://clck.ru/--?url={TELEGRAM_BOT_URI}c{trainer.pk}t").text}</code>'
                msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                            text=text, reply_markup=keyboard)
                return True

    # **************************** –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ group_ ********************************************
    if call.data.startswith('group_'):
        if '&' not in call.data:
            menu = []
            mes_data = call.data.split('_')
            group = ClubGroup.objects.filter(pk=int(mes_data[1])).first()
            club = group.club
            schedule = Lesson.objects.filter(is_group=True, group=group).order_by('dt')
            schedule_text = '<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!</b>'
            if schedule:
                schedule_text, trainers_str = '', ''
                for lesson in schedule:
                    for trainer in lesson.trainer.all():
                        if str(trainer) not in trainers_str:
                            trainers_str += str(trainer) + ', '
                    schedule_text += f"{timezone.datetime.strftime(lesson.dt, ' %d.%m.%Y %H:%M')} ‚Äî {trainers_str[:-2]}\n"
            text = f"üë®üèº‚Äçüè´ {club.title}, <b>{group.title}</b>:\n\n" \
                   f"{schedule_text}\n"
            lessons_individuals = Lesson.objects.filter(is_group=False).filter(
                participant__student__in=Student.objects.filter(group=group))
            if lessons_individuals:
                for lesson in lessons_individuals:
                    students = ''
                    for participant in lesson.participant_set.all():
                        if participant.student.soname not in students:
                            students += f'{participant.student.surname} {participant.student.name[0]}. {participant.student.soname[0]}., '
                    trainers = ''
                    for trainer in lesson.trainer.all():
                        trainers += f'{trainer.surname} {trainer.name[0]}. {trainer.soname[0]}., '
                    text += f'{timezone.datetime.strftime(lesson.dt, "%d.%m.%Y %H:%M")} - {students[:-2]} ({trainers[:-2]})\n'
            else:
                text += f'<b>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç! </b>\n'
            button_footer = [{'üë´ –£—á–µ–Ω–∏–∫–∏': f'group_{group.pk}&students'},
                             {'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': f'group_{group.pk}&statistic'},
                             {'text': '‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞',
                              'web_app': WebAppInfo(url=f'{BASE_HOST}/club/{club.pk}/group/{group.pk}/add-student/0/')},
                             {'text': '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ',
                              'web_app': WebAppInfo(url=f'{BASE_HOST}/club/{club.pk}/group/{group.pk}/add-lesson/')},
                             {'‚óÄÔ∏è –ù–∞–∑–∞–¥': f'club_{club.pk}&groups'}]

            keyboard2 = Keyboa(items=button_footer, items_in_row=2).keyboard
            keyboard = Keyboa.combine(keyboards=(keyboard2,))
            msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                        text=text, reply_markup=keyboard)
        else:
            mes_data = call.data.split('_')
            pk_group = int(mes_data[1].split('&')[0])
            group = ClubGroup.objects.filter(pk=int(pk_group)).first()
            club = group.club
            choice = mes_data[1].split('&')[1]

            if choice == 'students':
                students = Student.objects.filter(group=group, is_deleted=False)
                warning = ''
                if students:
                    for student in students:
                        if student.user is None:
                            warning = '‚ö†Ô∏è '
                        if not student.is_active:
                            warning = '‚õîÔ∏è '
                        menu.append(
                            {
                                f'{warning}{student.surname} {student.name[0]}.{student.soname[0]}.': f'student_{student.pk}'})
                    menu.append({'‚óÄÔ∏è –ù–∞–∑–∞–¥': f'group_{group.pk}'})
                    keyboard = Keyboa(items=menu, items_in_row=3)
                    msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                                text=f'üë´ {club.title}, <b>{group.title}</b>, —É—á–µ–Ω–∏–∫–∏:',
                                                reply_markup=keyboard())
                else:
                    menu = [{'text': '‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞',
                             'web_app': WebAppInfo(url=f'{BASE_HOST}/club/{club.pk}/group/{group.pk}/student-add/')},
                            {'‚óÄÔ∏è –ù–∞–∑–∞–¥': f'group_{group.pk}'}]
                    keyboard = Keyboa(items=menu, items_in_row=1)
                    msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                                text='ü§∑üèº‚Äç‚ôÇÔ∏è –í —ç—Ç—É –≥—Ä—É–ø–ø—É –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—á–µ–Ω–∏–∫–∏...',
                                                reply_markup=keyboard())

            if choice == 'statistic':
                text = f'–ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –∫–∞–∫–∞—è-—Ç–æ –∫—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ. –≠—Ç–æ –∫–∞–∫ —Ä–∞–∑ –Ω–∞ –ø–æ–¥—É–º–∞—Ç—å, {call.message.chat.first_name}...'
                menu.append({'‚óÄÔ∏è –ù–∞–∑–∞–¥': f'club_{club.pk}&groups'})
                keyboard = Keyboa(items=menu, items_in_row=2)
                msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                            text=f'üìä {club.title}, <b>{group.title}</b>, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n{text}',
                                            reply_markup=keyboard())

    # **************************** –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ student_ ********************************************
    if call.data.startswith('student_'):
        if '&' not in call.data:
            menu = []
            mes_data = call.data.split('_')
            student = Student.objects.filter(pk=int(mes_data[1])).first()
            group = student.group
            club = group.club
            birthday = "–ù–µ —É–∫–∞–∑–∞–Ω"
            if student.birthday:
                birthday = datetime.strftime(student.birthday, "%d.%m.%Y")
            statistic = '–ó–¥–µ—Å—å –∫–∞–∫–∞—è —Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 1.\n–ó–¥–µ—Å—å –∫–∞–∫–∞—è —Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 2.\n–ó–¥–µ—Å—å –∫–∞–∫–∞—è —Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 3.'
            if student.user is not None:
                button_footer = [
                    {'text': 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'web_app': WebAppInfo(url=f'{BASE_HOST}/student/{student.pk}/edit/')},
                    {'‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ': f'mailing_personal&student_{student.pk}'},
                    {'‚óÄÔ∏è –ù–∞–∑–∞–¥': f'group_{group.pk}&students'}]
                keyboard2 = Keyboa(items=button_footer).keyboard
                keyboard = Keyboa.combine(keyboards=(keyboard2,))
                text = f'<b>üë®üèº‚Äçüè´ {student}</b>\n\nüéÇ {birthday}\nüë§ {student.agent_name}\n' \
                       f'üìû <a href="tel:{student.agent_phone}">{student.agent_phone}</a>\n' \
                       f'üóÇ {group.title}\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n{statistic}'
                msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                            text=text, reply_markup=keyboard)
                return True
            else:
                button_footer = [{'‚óÄÔ∏è –ù–∞–∑–∞–¥': f'group_{group.pk}&students'}]
                keyboard2 = Keyboa(items=button_footer).keyboard
                keyboard = Keyboa.combine(keyboards=(keyboard2,))
                text = f'‚ö†Ô∏è –£—á–µ–Ω–∏–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Å—Å—ã–ª–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è:\n\n' \
                       f'üëâüèª <code>{requests.get(f"https://clck.ru/--?url={TELEGRAM_BOT_URI}c{student.pk}s").text}</code>'
                msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                            text=text, reply_markup=keyboard)
                return True
        else:
            pass

    # **************************** –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ mailing_ ********************************************
    if call.data.startswith('mailing_personal'):
        menu = []
        mes_data = call.data.split('&')
        for_who = mes_data[1].split('_')[0]
        recipient = mes_data[1].split('_')[1]
        if for_who == 'director':
            recipient_data = Director.objects.filter(pk=int(recipient)).first()
            club = recipient_data.club
        if for_who == 'trainer':
            recipient_data = Trainer.objects.filter(pk=int(recipient)).first()
            club = recipient_data.club
        if for_who == 'student':
            recipient_data = Student.objects.filter(pk=int(recipient)).first()
            club = recipient_data.group.club

        link = f'{BASE_HOST}/personal-mailing/<int:user_type>/<int:pk_user>/'


# **************************** –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π_ ********************************************
@bot.message_handler(func=lambda message: True)
def send(message, **kwargs):
    print(message.text)
    # msg = bot.send_message(message.chat.id, message.text)
    # bot.send_message(message.chat.id, f'{msg.message_id}')
    # sleep(5)
    # clear_chat(message.chat.id, msg.message_id)

# ********************** –û–±—Ä–∞–±–æ—Ç–∫–∞ –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ì–û —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è *****************************************
